#!/usr/bin/env python3

import json
import os
import socket
import sys
import time
import tornado
import tornado.ioloop

import thriftpy
import thriftpy.tornado
thriftpy.install_import_hook()
import ediplug_thrift

sys.path.append(os.path.join(
	os.path.dirname(__file__),
	"ediplug-py", "src", "ediplug"))

import smartplug

def log(*args, **kwargs):
	print("backend:", *args, **kwargs)
	sys.stdout.flush()

configuration = {
	"plugs": {
		"hue": {
			"ip": "192.168.1.80",
			"username": "admin",
			"password": "1234"
		}
	},
	"refresh_rate": 5
}


class StatisticsWriter(object):
	def __init__(self):
		self.output_file = open("data.csv", 'a', 1)
		# TODO: read file to get data
		self.measurements = {
			time.time(): [0.0 for plug in configuration["plugs"]]
		}

	def add_measurements(self, measurements):
		timepoint = time.time()
		self.measurements[timepoint] = measurements
		datas = str.join(" ",
			[str(measurement) for measurement in measurements])
		self.output_file.write(str(time.time())+" "+datas+"\n")


	def get_latest_measurements(self):
		latestTime = max(self.measurements.keys())
		return self.measurements[latestTime]

	def get_measurements_between(self, begin, end):
		result = []
		for measurementTime, measurementValues in self.measurements.items():
			if begin <= measurementTime <= end:
				result.append((measurementTime, measurementValues))
		return result

class Backend(object):
	def __init__(self):
		self.writer = StatisticsWriter()
		log("Starting backend")
		self.ioloop = tornado.ioloop.IOLoop.current()
		self.measurementTask = tornado.ioloop.PeriodicCallback(
			self.getMeasurements, configuration["refresh_rate"]*1000)
		self.server = thriftpy.tornado.make_server(
			ediplug_thrift.Ediplug, self, io_loop=self.ioloop)
		self.selfCheckTask = tornado.ioloop.PeriodicCallback(
			self.checkServer, 1000)

	def getMeasurements(self):
		plugs = [
			smartplug.SmartPlug(plug["ip"], (plug["username"], plug["password"]))
			for plug in configuration["plugs"].values()]
		self.writer.add_measurements([float(plug.power) for plug in plugs])

	def getConsumptionBetween(self, begin, end):
		result = []
		measurementses = self.writer.get_measurements_between(
			begin.epoch, end.epoch)
		for measurementTime, measurementValues in measurementses:
			for measurementValue, plugName in zip(
					measurementValues, configuration["plugs"]):
				result.append(ediplug_thrift.Measurement(
					plugName,
					ediplug_thrift.Timepoint(measurementTime),
					ediplug_thrift.Consumption(measurementValue)))
		return result

	@tornado.gen.coroutine
	def checkServer(self):
		client = yield thriftpy.tornado.make_client(
			ediplug_thrift.Ediplug, '127.0.0.1', 6000)
		result = yield client.getCurrentConsumption()
		assert(result == self.getCurrentConsumption())
		result = yield client.getConsumptionBetween(
			ediplug_thrift.Timepoint(time.time() - 60),
			ediplug_thrift.Timepoint(time.time()))
		client.close()

	def getCurrentConsumption(self):
		currentConsumption = self.writer.get_latest_measurements()[0]
		return currentConsumption

	def run(self):
		self.measurementTask.start()
		self.selfCheckTask.start()
		self.server.listen(6000)
		self.ioloop.start()


def main():
	backend = Backend()
	backend.run()

if __name__ == "__main__":
	main()
