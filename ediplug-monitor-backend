#!/usr/bin/env python3

import os
import socket
import sys
import time
import tornado
import tornado.ioloop

import thriftpy
import thriftpy.tornado
thriftpy.install_import_hook()
import ediplug_thrift

sys.path.append(os.path.join(
	os.path.dirname(__file__),
	"ediplug-py", "src", "ediplug"))

import smartplug

def log(*args, **kwargs):
	print(*args, **kwargs)
	sys.stdout.flush()

plug_ip="192.168.1.80"
plug_user="admin"
plug_password="1234"
plug_refresh_rate=5


class StatisticsWriter(object):
	def __init__(self):
		self.output_file = open("data.csv", 'a', 1)

	def add_measurements(self, measurements):
		datas = str.join(" ",
			[str(measurement) for measurement in measurements])
		self.output_file.write(str(time.time())+" "+datas+"\n")


class Backend(object):
	def __init__(self):
		self.writer = StatisticsWriter()
		log("Starting backend")
		self.ioloop = tornado.ioloop.IOLoop.current()
		self.measurementTask = tornado.ioloop.PeriodicCallback(
			self.getMeasurements, plug_refresh_rate*1000)
		self.server = thriftpy.tornado.make_server(
			ediplug_thrift.Ediplug, self, io_loop=self.ioloop)
		self.selfCheckTask = tornado.ioloop.PeriodicCallback(
			self.checkServer, 1000)

	def getMeasurements(self):
		plug = smartplug.SmartPlug(plug_ip, (plug_user, plug_password))
		self.writer.add_measurements([plug.power])

	@tornado.gen.coroutine
	def checkServer(self):
		client = yield thriftpy.tornado.make_client(
			ediplug_thrift.Ediplug, '127.0.0.1', 6000)
		result = yield client.getCurrentConsumption()
		client.close()
		assert(result == self.getCurrentConsumption())

	def getCurrentConsumption(self):
		return 0.0

	def run(self):
		self.measurementTask.start()
		self.selfCheckTask.start()
		self.server.listen(6000)
		self.ioloop.start()


def main():
	backend = Backend()
	backend.run()

if __name__ == "__main__":
	main()
